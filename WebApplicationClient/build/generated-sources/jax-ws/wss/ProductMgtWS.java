
package wss;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.8
 * Generated source version: 2.2
 * 
 */
@WebService(name = "ProductMgtWS", targetNamespace = "http://WSS/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface ProductMgtWS {


    /**
     * 
     * @param regionName
     * @param wineryName
     * @param cateName
     * @return
     *     returns java.util.List<wss.ItemEntity>
     * @throws ProductNotFoundException_Exception
     */
    @WebMethod(operationName = "searchProduct_1")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "searchProduct_1", targetNamespace = "http://WSS/", className = "wss.SearchProduct1")
    @ResponseWrapper(localName = "searchProduct_1Response", targetNamespace = "http://WSS/", className = "wss.SearchProduct1Response")
    @Action(input = "http://WSS/ProductMgtWS/searchProduct_1Request", output = "http://WSS/ProductMgtWS/searchProduct_1Response", fault = {
        @FaultAction(className = ProductNotFoundException_Exception.class, value = "http://WSS/ProductMgtWS/searchProduct_1/Fault/ProductNotFoundException")
    })
    public List<ItemEntity> searchProduct1(
        @WebParam(name = "wineryName", targetNamespace = "")
        String wineryName,
        @WebParam(name = "regionName", targetNamespace = "")
        String regionName,
        @WebParam(name = "cateName", targetNamespace = "")
        String cateName)
        throws ProductNotFoundException_Exception
    ;

    /**
     * 
     * @param itemName
     * @return
     *     returns wss.ItemEntity
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "searchProduct", targetNamespace = "http://WSS/", className = "wss.SearchProduct")
    @ResponseWrapper(localName = "searchProductResponse", targetNamespace = "http://WSS/", className = "wss.SearchProductResponse")
    @Action(input = "http://WSS/ProductMgtWS/searchProductRequest", output = "http://WSS/ProductMgtWS/searchProductResponse")
    public ItemEntity searchProduct(
        @WebParam(name = "itemName", targetNamespace = "")
        String itemName);

    /**
     * 
     * @param accountId
     * @param itemId
     * @param rating
     * @param content
     * @throws AccountNotFoundException_Exception
     * @throws ProductNotFoundException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "rateProduct", targetNamespace = "http://WSS/", className = "wss.RateProduct")
    @ResponseWrapper(localName = "rateProductResponse", targetNamespace = "http://WSS/", className = "wss.RateProductResponse")
    @Action(input = "http://WSS/ProductMgtWS/rateProductRequest", output = "http://WSS/ProductMgtWS/rateProductResponse", fault = {
        @FaultAction(className = AccountNotFoundException_Exception.class, value = "http://WSS/ProductMgtWS/rateProduct/Fault/AccountNotFoundException"),
        @FaultAction(className = ProductNotFoundException_Exception.class, value = "http://WSS/ProductMgtWS/rateProduct/Fault/ProductNotFoundException")
    })
    public void rateProduct(
        @WebParam(name = "accountId", targetNamespace = "")
        Long accountId,
        @WebParam(name = "itemId", targetNamespace = "")
        Long itemId,
        @WebParam(name = "rating", targetNamespace = "")
        Double rating,
        @WebParam(name = "content", targetNamespace = "")
        String content)
        throws AccountNotFoundException_Exception, ProductNotFoundException_Exception
    ;

    /**
     * 
     * @param accountId
     * @return
     *     returns java.util.List<wss.CommentEntity>
     * @throws AccountNotFoundException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "viewAllCommentsFromAccount", targetNamespace = "http://WSS/", className = "wss.ViewAllCommentsFromAccount")
    @ResponseWrapper(localName = "viewAllCommentsFromAccountResponse", targetNamespace = "http://WSS/", className = "wss.ViewAllCommentsFromAccountResponse")
    @Action(input = "http://WSS/ProductMgtWS/viewAllCommentsFromAccountRequest", output = "http://WSS/ProductMgtWS/viewAllCommentsFromAccountResponse", fault = {
        @FaultAction(className = AccountNotFoundException_Exception.class, value = "http://WSS/ProductMgtWS/viewAllCommentsFromAccount/Fault/AccountNotFoundException")
    })
    public List<CommentEntity> viewAllCommentsFromAccount(
        @WebParam(name = "accountId", targetNamespace = "")
        Long accountId)
        throws AccountNotFoundException_Exception
    ;

    /**
     * 
     * @param itemId
     * @return
     *     returns java.util.List<wss.CommentEntity>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "viewAllCommentsOfProduct", targetNamespace = "http://WSS/", className = "wss.ViewAllCommentsOfProduct")
    @ResponseWrapper(localName = "viewAllCommentsOfProductResponse", targetNamespace = "http://WSS/", className = "wss.ViewAllCommentsOfProductResponse")
    @Action(input = "http://WSS/ProductMgtWS/viewAllCommentsOfProductRequest", output = "http://WSS/ProductMgtWS/viewAllCommentsOfProductResponse")
    public List<CommentEntity> viewAllCommentsOfProduct(
        @WebParam(name = "itemId", targetNamespace = "")
        Long itemId);

}
